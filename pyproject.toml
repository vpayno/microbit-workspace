[project]
name = "microbit-workspace"
description = "microbit workspace"
authors = [
    {name = "Victor Payno", email = "vpayno@users.noreply.github.com"},
]
maintainers = [
    {name = "Victor Payno", email = "vpayno@users.noreply.github.com"},
]
dependencies = [
]
requires-python = ">=3.12"
dynamic = ["version"]
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["python-workspace", "cli", "terminal"]

[project.urls]
"Homepage" = "https://github.com/vpayno/microbit-workspace"
"Bug Tracker" = "https://github.com/vpayno/microbit-workspace/issues"
"Repository" = "https://github.com/vpayno/microbit-workspace.git"
"Changelog" = "https://github.com/vpayno/microbit-workspace/releases"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pyright]
include = ["python/src", "python/test"]

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
# select = []
# ignore = []
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.mypy]
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality =true
warn_return_any = true

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
line_length = 120
skip_gitignore = true

[tool.bandit]
exclude_dirs = [".venv"]

[tool.bandit.assert_used]
skips = ["*/*_test.py", "*/test_*.py"]

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = [
    "pytest>=8.1.2",
    "pytest-randomly",
    "pytest-datafiles",
    "pytest-cov",
    "mypy>=1.10.0",
    "mypy-extensions>=1.0.0",
    "pyright>=1.1.360",
    "refurb",
    "ruff>=0.4.2",
    "pylint",
    "bandit",
    "mkdocs",
    "pdoc3",
    "ruff-lsp>=0.0.53",
    "python-lsp-server>=1.11.0",
]

[tool.pdm.version]
source = "scm"
# write_to = "learn_toml/_version.py"
# write_template = "__version__ = '{}'"

[tool.pdm.scripts]
hello_main = { call = "helloworld:main" }
hello_module = { shell = "python -m helloworld" }

clean_docs = { shell = "rm -rf html mkdocs pydoc pdoc" }
clean_pycache = { shell = "find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete" }
clean_mypy = { shell = "rm -rf ./python/src/*/.mypy_cache ./python/test/.mypy_cache" }
clean_build = { shell = "rm -rf dist" }
clean = { composite = ["clean_docs", "clean_pycache", "clean_mypy", "clean_build"] }

format = { shell = "ruff format" }

ci-ruff = { shell = "ruff check" }
ci-pylint = { shell = "pylint --ignore-patterns='_[a-z][a-z0-9_-]+.py' ./python/src ./python/test" }
ci-pyright = { shell = "pyright --stats" }
ci-refurb = { shell = "refurb ./python/src ./python/test" }
ci-bandit = { shell = "bandit --verbose --recursive --config ./pyproject.toml ." }
ci-mypy = { shell = "mypy --install-types --non-interactive ./python/src ./python/test" }
lint = { composite = ["ci-ruff", "ci-pyright", "ci-pylint", "ci-refurb", "ci-mypy"] }

doctest = { shell = "python -m doctest -v ./python/src/*/[a-z]*.py" }
pytest = { shell = "pytest --verbose --cov=. --cov-branch --cov-report=term-missing --cov-report=xml:.coverage.xml -p no:randomly ./python/test" }
coverage_report = { shell = "coverage report --show-missing" }
coverage_annotate = { shell = "coverage annotate" }
test = { composite = ["doctest", "pytest"] }

pydoc_text = { shell = "mkdir pydoc; for d in $(ls python/src/); do python -m pydoc ${d} | tee ./python/pydoc/${d}.txt; done" }
pydoc_html = { shell = "mkdir pydoc; for d in $(ls python/src/); do python -m pydoc -w ${d}; mv ${d}.html ./python/pydoc; done" }
pdoc_html = { shell = "PYTHONPATH=src pdoc --html --force --output-dir ./python/pdoc ." }
mkdocs = { shell = "mkdocs new mkdocs && cd mkdocs && echo theme: readthedocs >> python/mkdocs.yml && yq --yaml-output . python/mkdocs.yml | sponge python/mkdocs.yml && mkdocs build" }
doc = { composite = ["pydoc_text", "pydoc_html", "pdoc_html", "mkdocs"] }

end = { shell = 'printf "\nFinished running pdm run full\n\n"' }

full = { composite = ["clean", "format", "lint", "test", "doc", "end"] }

[project.scripts]
